Add string literal and character literal examples to strings section,
preferably with common escape sequences like \n \t and hex and octal,
with link to a complete list.  Fiddly bit is figuring out how to
escape these properly when generating LaTeX.

Possibly useful Java doc link for escape sequences inside strings:
    http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6

start at a diff that doesn't work for LaTeX:

-                                         :html "See also IO/to string"}]]
+                                         :html "See also IO/to string"}
+                                        "Literals:"
+                                        "\"foo\""
+                                        "\"newline \\n tab \\t\""
+                                        "\"quote \\\" backslash \\\\\""
+;;                                        {:latex " \\href{http://en.wikipedia.org/wiki/UTF-16}{UTF-16}:"
+;;                                         :html "<a href=\"http://en.wikipedia.org/wiki/UTF-16\">UTF-16</a>:"}
+;;                                        "\"\\ua028 octal \\177\\""
+                                        
+                                        ]]


Other links within Clojure docs that might be linked to directly at
appropriate places:

    http://clojure.org/reader#The%20Reader--extensible%20data%20notation%20%28edn%29
    http://clojure.org/reader#The%20Reader--Tagged%20Literals


Links to tutorial-style articles for these topics:
    parsing/generating XML

    zippers - I found these nice blog articles linked to from the
    Clojure 1.2 version of clojure.zip/zipper on clojuredocs.org.  I
    added the URLs to the Clojure 1.3 version, too.
        Brian Marick: "Editing" trees in Clojure with clojure.zip
        http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/
        Alex Miller: Zippers with records in Clojure
        http://tech.puredanger.com/2010/10/22/zippers-with-records-in-clojure/

    Leiningen
    Java classpaths, JARs, etc.
        Maybe this would be a good quick start to Leiningen and Java classpaths?
        http://www.unexpected-vortices.com/clojure/brief-beginners-guide/

    This briefly describes several resources for those wanting to
    learn the Clojure language:
    http://www.elangocheran.com/blog/2012/03/the-newbies-guide-learning-clojure/

Introductory material on Lisp family languages, but not Clojure in particular:
    http://www.lisperati.com/clojure-spels/casting.html

Intermediate to advanced material on Common Lisp macros:
    "On Lisp", Paul Graham, TBD: find link to free copy

Add tooltips for links that do not go to clojuredocs.org.  They don't
have to be anything fancy -- just something that makes it obvious they
are not doc strings, and the web page isn't 'broken'.

Add some brief notes about how different types of arithmetic work:
bigint contagion, operators that auto-convert to bigint if needed,
unchecked operators intended only for primitive arith types.  How to
format/printf bigints and ratios.  What else?

----------------------------------------
Symbols from more namespaces, or at least links to the namespaces:

There are new contrib namespaces that are not mentioned anywhere.
Make a list of all of them, annotated with which are in now, and which
are not.  Consider creating a link to documentation for the entire
namespace somewhere on the cheatsheet, even if we don't include its
individual symbols.

Is this a complete list of new (i.e. Clojure 1.3) contrib libraries?

    http://clojure.github.com/

Is that list complete?  Are there any on the following page that are
not on the one above?

    https://github.com/clojure

Which ones worth adding to cheatsheet?  As of this time, it seems that
there are no documentation pages for any of these on clojuredocs.org
(I've filed a request asking if they plan to do so), but there are on
clojure.github.com (linked to from the page above).


Add links to entire namespaces on clojuredocs.org, e.g.:

http://clojuredocs.org/clojure_core/clojure.java.io


therenow  clojure.core
notthere  clojure.core.protocols (and keep it notthere?)
TBD clojure.core.reducers
therenow  clojure.data
TBD clojure.inspector
therenow  clojure.java.browse  (only clojure.java.browse/browse-url)
notthere  clojure.java.browse-ui (and keep it notthere?)
therenow  clojure.java.io
therenow  clojure.java.javadoc
therenow  clojure.java.shell   (only sh, with-sh-env, with-sh-dir)
TBD clojure.main           (TBD: What is worth adding to cheatsheet, if any?)
therenow  clojure.pprint
TBD clojure.reflect        (only reflect)
therenow  clojure.repl
therenow  clojure.set
TBD clojure.stacktrace     (TBD: What is worth adding to cheatsheet, if any?  Is anything here more useful in any way than clojure.repl/pst ?)
therenow  clojure.string
TBDlo clojure.template
TBD clojure.test
therenow  clojure.walk
therenow  clojure.xml (only parse so far.  TBD: Anything else worth adding?)
therenow  clojure.zip

Pages listing other Clojure libraries:
    http://www.clojure-toolbox.com/
    http://cnlojure.org/open.html
    http://clojure-libraries.appspot.com/

TBD: Is there any chance of merging the above efforts into 1 site
maintained at least as well as any of the existing ones?
----------------------------------------


Find good places to link to for macro things like the special syntax `
~ ~@, and perhaps also link to there from the Macros section header.


Give examples of syntax for type-hinting Java arrays of arbitrary Java
classes, with the link below for details:

    http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html#getName%28%29

Example in Abstractions section for extend-protocol

Consider adding (def f ns/g) and (def f #'ns/g) distinction, and what
it will do differently.  Any good article or docs to link to for that?



----------------------------------------------------------------------
ns, require, use, import
----------------------------------------------------------------------

Give most common examples of ns use, with :import, :require, and :use

Maybe also give the REPL equivalents of those expressions?

See this article for ideas of things that could be adapted to put
right into the cheatsheet:

    http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html
----------------------------------------------------------------------


Add java.io.DataOutputStream / java.io.DataInputStream links for
binary I/O?

java.util.Scanner might be nice to know about.

distinct? doesn't really operate on collections.  It is more like max,
min, and some others in taking an arbitrarily large but variable
number of arguments.  Is there a better place it belongs than
Collections/Content tests?

Decide which if any of the following symbols should be included in the
cheatsheet, and if so, where.

First, a short list of things that seems like they are among the more
significant ones to know about:

bases
class
clojure.repl/dir
clojure.repl/root-cause
definterface
extend
extend-protocol
extenders
extends?
satisfies?
supers
trampoline
type
underive
with-bindings


Next, a short list of deprecated things that definitely should not be
in the cheat sheet:

add-classpath :deprecated "1.1" (no documented replacement)
agent-errors :deprecated "1.2" (use agent-error, which is in sheet)
clear-agent-errors :deprecated "1.2" (use restart-agent, which is in sheet)
replicate :deprecated "1.3" (use repeat, which is in sheet)

There are a few other things in clojure.test, clojure.parallel (the
whole namespace), and contrib lib tools.namespace, but that appears to
be all of the Vars that are deprecated.




Sorted list of 423 symbols in lookup table that were never used:

*allow-unresolved-vars*
*assert*
*compiler-options*
*flush-on-newline*
*fn-loader*
*math-context*
*print-namespace-maps*
*read-eval*
*reader-resolver*
*source-path*
*suppress-read*
*use-context-classloader*
*verbose-defrecords*
->ArrayChunk
->Eduction
->Vec
->VecNode
->VecSeq
-cache-protocol-fn
-reset-methods
EMPTY-NODE
Inst
PrintWriter-on
Throwable->map
accessor
add-classpath
add-tap
agent-errors
await1
chunk
chunk-append
chunk-buffer
chunk-cons
chunk-first
chunk-next
chunk-rest
chunked-seq?
clear-agent-errors
clojure.core.protocols/CollReduce
clojure.core.protocols/Datafiable
clojure.core.protocols/IKVReduce
clojure.core.protocols/InternalReduce
clojure.core.protocols/Navigable
clojure.core.protocols/coll-reduce
clojure.core.protocols/datafy
clojure.core.protocols/internal-reduce
clojure.core.protocols/kv-reduce
clojure.core.protocols/nav
clojure.core.reducers/->Cat
clojure.core.reducers/CollFold
clojure.core.reducers/append!
clojure.core.reducers/cat
clojure.core.reducers/coll-fold
clojure.core.reducers/drop
clojure.core.reducers/filter
clojure.core.reducers/fjtask
clojure.core.reducers/flatten
clojure.core.reducers/fold
clojure.core.reducers/foldcat
clojure.core.reducers/folder
clojure.core.reducers/map
clojure.core.reducers/mapcat
clojure.core.reducers/monoid
clojure.core.reducers/pool
clojure.core.reducers/reduce
clojure.core.reducers/reducer
clojure.core.reducers/remove
clojure.core.reducers/take
clojure.core.reducers/take-while
clojure.core.server/*session*
clojure.core.server/io-prepl
clojure.core.server/prepl
clojure.core.server/remote-prepl
clojure.core.server/repl
clojure.core.server/repl-init
clojure.core.server/repl-read
clojure.core.server/start-server
clojure.core.server/start-servers
clojure.core.server/stop-server
clojure.core.server/stop-servers
clojure.core.specs.alpha/even-number-of-forms?
clojure.data/Diff
clojure.data/EqualityPartition
clojure.data/diff-similar
clojure.data/equality-partition
clojure.datafy/datafy
clojure.datafy/nav
clojure.inspector/atom?
clojure.inspector/collection-tag
clojure.inspector/get-child
clojure.inspector/get-child-count
clojure.inspector/inspect
clojure.inspector/inspect-table
clojure.inspector/inspect-tree
clojure.inspector/is-leaf
clojure.inspector/list-model
clojure.inspector/list-provider
clojure.inspector/old-table-model
clojure.inspector/table-model
clojure.inspector/tree-model
clojure.instant/parse-timestamp
clojure.instant/read-instant-calendar
clojure.instant/read-instant-date
clojure.instant/read-instant-timestamp
clojure.instant/validated
clojure.java.browse/*open-url-script*
clojure.java.io/Coercions
clojure.java.io/IOFactory
clojure.java.io/default-streams-impl
clojure.java.io/make-input-stream
clojure.java.io/make-output-stream
clojure.java.io/make-parents
clojure.java.io/make-reader
clojure.java.io/make-writer
clojure.java.javadoc/*core-java-api*
clojure.java.javadoc/*feeling-lucky*
clojure.java.javadoc/*feeling-lucky-url*
clojure.java.javadoc/*local-javadocs*
clojure.java.javadoc/*remote-javadocs*
clojure.java.javadoc/add-local-javadoc
clojure.java.javadoc/add-remote-javadoc
clojure.java.shell/*sh-dir*
clojure.java.shell/*sh-env*
clojure.main/demunge
clojure.main/err->msg
clojure.main/load-script
clojure.main/main
clojure.main/renumbering-read
clojure.main/repl
clojure.main/repl-caught
clojure.main/repl-exception
clojure.main/repl-prompt
clojure.main/repl-read
clojure.main/repl-requires
clojure.main/report-error
clojure.main/root-cause
clojure.main/skip-if-eol
clojure.main/skip-whitespace
clojure.main/stack-element-str
clojure.main/with-bindings
clojure.main/with-read-known
clojure.pprint/*print-base*
clojure.pprint/*print-miser-width*
clojure.pprint/*print-pprint-dispatch*
clojure.pprint/*print-pretty*
clojure.pprint/*print-radix*
clojure.pprint/*print-right-margin*
clojure.pprint/*print-suppress-namespaces*
clojure.pprint/code-dispatch
clojure.pprint/formatter
clojure.pprint/formatter-out
clojure.pprint/fresh-line
clojure.pprint/get-pretty-writer
clojure.pprint/pp
clojure.pprint/pprint-indent
clojure.pprint/pprint-logical-block
clojure.pprint/pprint-newline
clojure.pprint/pprint-tab
clojure.pprint/print-length-loop
clojure.pprint/set-pprint-dispatch
clojure.pprint/simple-dispatch
clojure.pprint/with-pprint-dispatch
clojure.pprint/write
clojure.pprint/write-out
clojure.reflect/->AsmReflector
clojure.reflect/->Constructor
clojure.reflect/->Field
clojure.reflect/->JavaReflector
clojure.reflect/->Method
clojure.reflect/ClassResolver
clojure.reflect/Reflector
clojure.reflect/TypeReference
clojure.reflect/do-reflect
clojure.reflect/flag-descriptors
clojure.reflect/map->Constructor
clojure.reflect/map->Field
clojure.reflect/map->Method
clojure.reflect/reflect
clojure.reflect/resolve-class
clojure.reflect/type-reflect
clojure.reflect/typename
clojure.repl/demunge
clojure.repl/dir-fn
clojure.repl/root-cause
clojure.repl/set-break-handler!
clojure.repl/source-fn
clojure.repl/stack-element-str
clojure.repl/thread-stopper
clojure.spec.alpha/*coll-check-limit*
clojure.spec.alpha/*coll-error-limit*
clojure.spec.alpha/*compile-asserts*
clojure.spec.alpha/*fspec-iterations*
clojure.spec.alpha/*recursion-limit*
clojure.spec.alpha/Spec
clojure.spec.alpha/Specize
clojure.spec.alpha/abbrev
clojure.spec.alpha/alt-impl
clojure.spec.alpha/amp-impl
clojure.spec.alpha/and-spec-impl
clojure.spec.alpha/assert*
clojure.spec.alpha/cat-impl
clojure.spec.alpha/conform*
clojure.spec.alpha/def-impl
clojure.spec.alpha/describe*
clojure.spec.alpha/every-impl
clojure.spec.alpha/explain*
clojure.spec.alpha/explain-data*
clojure.spec.alpha/fspec-impl
clojure.spec.alpha/gen*
clojure.spec.alpha/invalid?
clojure.spec.alpha/map-spec-impl
clojure.spec.alpha/maybe-impl
clojure.spec.alpha/merge-spec-impl
clojure.spec.alpha/multi-spec-impl
clojure.spec.alpha/nilable-impl
clojure.spec.alpha/nonconforming
clojure.spec.alpha/or-spec-impl
clojure.spec.alpha/regex-spec-impl
clojure.spec.alpha/regex?
clojure.spec.alpha/rep+impl
clojure.spec.alpha/rep-impl
clojure.spec.alpha/spec-impl
clojure.spec.alpha/specize*
clojure.spec.alpha/tuple
clojure.spec.alpha/tuple-impl
clojure.spec.alpha/unform*
clojure.spec.alpha/with-gen*
clojure.spec.gen.alpha/any
clojure.spec.gen.alpha/any-printable
clojure.spec.gen.alpha/bind
clojure.spec.gen.alpha/boolean
clojure.spec.gen.alpha/bytes
clojure.spec.gen.alpha/cat
clojure.spec.gen.alpha/char
clojure.spec.gen.alpha/char-alpha
clojure.spec.gen.alpha/char-alphanumeric
clojure.spec.gen.alpha/char-ascii
clojure.spec.gen.alpha/choose
clojure.spec.gen.alpha/delay
clojure.spec.gen.alpha/delay-impl
clojure.spec.gen.alpha/double
clojure.spec.gen.alpha/double*
clojure.spec.gen.alpha/elements
clojure.spec.gen.alpha/fmap
clojure.spec.gen.alpha/for-all*
clojure.spec.gen.alpha/frequency
clojure.spec.gen.alpha/gen-for-name
clojure.spec.gen.alpha/gen-for-pred
clojure.spec.gen.alpha/generate
clojure.spec.gen.alpha/hash-map
clojure.spec.gen.alpha/int
clojure.spec.gen.alpha/keyword
clojure.spec.gen.alpha/keyword-ns
clojure.spec.gen.alpha/large-integer
clojure.spec.gen.alpha/large-integer*
clojure.spec.gen.alpha/lazy-combinator
clojure.spec.gen.alpha/lazy-combinators
clojure.spec.gen.alpha/lazy-prim
clojure.spec.gen.alpha/lazy-prims
clojure.spec.gen.alpha/list
clojure.spec.gen.alpha/map
clojure.spec.gen.alpha/not-empty
clojure.spec.gen.alpha/one-of
clojure.spec.gen.alpha/quick-check
clojure.spec.gen.alpha/ratio
clojure.spec.gen.alpha/return
clojure.spec.gen.alpha/sample
clojure.spec.gen.alpha/set
clojure.spec.gen.alpha/shuffle
clojure.spec.gen.alpha/simple-type
clojure.spec.gen.alpha/simple-type-printable
clojure.spec.gen.alpha/string
clojure.spec.gen.alpha/string-alphanumeric
clojure.spec.gen.alpha/string-ascii
clojure.spec.gen.alpha/such-that
clojure.spec.gen.alpha/symbol
clojure.spec.gen.alpha/symbol-ns
clojure.spec.gen.alpha/tuple
clojure.spec.gen.alpha/uuid
clojure.spec.gen.alpha/vector
clojure.spec.gen.alpha/vector-distinct
clojure.stacktrace/e
clojure.stacktrace/print-cause-trace
clojure.stacktrace/print-stack-trace
clojure.stacktrace/print-throwable
clojure.stacktrace/print-trace-element
clojure.stacktrace/root-cause
clojure.template/apply-template
clojure.template/do-template
clojure.test.junit/*depth*
clojure.test.junit/*var-context*
clojure.test.junit/element-content
clojure.test.junit/error-el
clojure.test.junit/failure-el
clojure.test.junit/finish-case
clojure.test.junit/finish-element
clojure.test.junit/finish-suite
clojure.test.junit/indent
clojure.test.junit/junit-report
clojure.test.junit/message-el
clojure.test.junit/package-class
clojure.test.junit/start-case
clojure.test.junit/start-element
clojure.test.junit/start-suite
clojure.test.junit/suite-attrs
clojure.test.junit/test-name
clojure.test.junit/with-junit-output
clojure.test.tap/print-diagnostics
clojure.test.tap/print-tap-diagnostic
clojure.test.tap/print-tap-fail
clojure.test.tap/print-tap-pass
clojure.test.tap/print-tap-plan
clojure.test.tap/tap-report
clojure.test.tap/with-tap-output
clojure.test/*initial-report-counters*
clojure.test/*load-tests*
clojure.test/*report-counters*
clojure.test/*stack-trace-depth*
clojure.test/*test-out*
clojure.test/*testing-contexts*
clojure.test/*testing-vars*
clojure.test/are
clojure.test/assert-any
clojure.test/assert-expr
clojure.test/assert-predicate
clojure.test/compose-fixtures
clojure.test/deftest
clojure.test/deftest-
clojure.test/do-report
clojure.test/file-position
clojure.test/function?
clojure.test/get-possibly-unbound-var
clojure.test/inc-report-counter
clojure.test/is
clojure.test/join-fixtures
clojure.test/report
clojure.test/run-all-tests
clojure.test/run-tests
clojure.test/set-test
clojure.test/successful?
clojure.test/test-all-vars
clojure.test/test-ns
clojure.test/test-var
clojure.test/test-vars
clojure.test/testing
clojure.test/testing-contexts-str
clojure.test/testing-vars-str
clojure.test/try-expr
clojure.test/use-fixtures
clojure.test/with-test
clojure.test/with-test-out
clojure.walk/keywordize-keys
clojure.walk/stringify-keys
clojure.xml/*current*
clojure.xml/*sb*
clojure.xml/*stack*
clojure.xml/*state*
clojure.xml/attrs
clojure.xml/content
clojure.xml/content-handler
clojure.xml/element
clojure.xml/emit
clojure.xml/emit-element
clojure.xml/startparse-sax
clojure.xml/tag
create-struct
defstruct
delay?
denominator
destructure
find-protocol-impl
find-protocol-method
hash-combine
hash-ordered-coll
hash-unordered-coll
inst-ms
inst-ms*
method-sig
mix-collection-hash
munge
namespace-munge
numerator
primitives-classnames
print-ctor
print-dup
print-method
print-simple
proxy-call-with-super
proxy-name
read
read+string
read-string
reader-conditional
reader-conditional?
refer-clojure
remove-tap
replicate
special-symbol?
struct
struct-map
tagged-literal
tagged-literal?
tap>
unchecked-add-int
unchecked-byte
unchecked-char
unchecked-dec-int
unchecked-divide-int
unchecked-double
unchecked-float
unchecked-inc-int
unchecked-int
unchecked-long
unchecked-multiply-int
unchecked-negate-int
unchecked-remainder-int
unchecked-short
unchecked-subtract-int
unquote
unquote-splicing
with-bindings
with-bindings*
with-loading-context
